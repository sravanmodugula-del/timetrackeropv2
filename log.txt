09:31:54 0|fmb-timetracker  | 2025-08-30T09:31:54: 2025-08-30T16:31:54.743Z ðŸ”´ [SESSION] Failed to initialize MS SQL session store: {
09:31:54 0|fmb-timetracker  |   "message": "MSSQLStore is not a constructor",
09:31:54 0|fmb-timetracker  |   "code": "NO_CODE",
09:31:54 0|fmb-timetracker  |   "name": "TypeError",
09:31:54 0|fmb-timetracker  |   "stack": "TypeError: MSSQLStore is not a constructor\n    at getSession2 (file:///C:/fmb-timetracker/dist/index.js:3197:29)\n    at async createServer2 (file:///C:/fmb-timet
racker/dist/index.js:3281:31)",
09:31:54 0|fmb-timetracker  |   "originalError": "NO_ORIGINAL",
09:31:54 0|fmb-timetracker  |   "number": "NO_NUMBER",
09:31:54 0|fmb-timetracker  |   "severity": "NO_SEVERITY",
09:31:54 0|fmb-timetracker  |   "state": "NO_STATE",
09:31:54 0|fmb-timetracker  |   "fullError": "{\"stack\":\"TypeError: MSSQLStore is not a constructor\\n    at getSession2 (file:///C:/fmb-timetracker/dist/index.js:3197:29)\\n    at async createServer2 (f
ile:///C:/fmb-timetracker/dist/index.js:3281:31)\",\"message\":\"MSSQLStore is not a constructor\"}"
09:31:54 0|fmb-timetracker  | }
09:31:54 0|fmb-timetracker  | 2025-08-30T09:31:54: 2025-08-30T16:31:54.743Z ðŸŸ¡ [SESSION] Using memory session store as fallback
09:31:54 0|fmb-timetracker  | 2025-08-30T09:31:54: Warning: connect.session() MemoryStore is not
09:31:54 0|fmb-timetracker  | designed for a production environment, as it will leak
09:31:54 0|fmb-timetracker  | memory, and will not scale past a single process.
09:31:54 0|fmb-timetracker  | 2025-08-30T09:31:54: 2025-08-30T16:31:54.744Z ðŸŸ¢ [SERVER] Session middleware configured successfully
09:31:54 


Code analysis
Your code:
javascript
const { default: MSSQLStore } = await import('connect-mssql-v2');
Use code with caution.

await import('connect-mssql-v2'): This performs a dynamic import of the connect-mssql-v2 module.
{ default: MSSQLStore }: This destructures the default property from the imported module and renames it to MSSQLStore. This is the correct way to get a default export. 
However, the error message indicates this is not what the module exports. The log suggests one of the following scenarios:
The MSSQLStore class is a named export, not a default export.
The module's top-level export is not an object with a default property.
The module expects a different import method or initialization step. 
Corrected import logic
The most likely fix is to adjust the import statement based on how the connect-mssql-v2 module is actually structured.
Option 1: Named import
If MSSQLStore is a named export, use a standard named import statement:
javascript
const { MSSQLStore } = await import('connect-mssql-v2');
Use code with caution.

Option 2: Full module import
If neither default nor MSSQLStore is the correct export, you can import the entire module and then access the constructor from it.
javascript
const mssqlStoreModule = await import('connect-mssql-v2');
// Assuming MSSQLStore is the intended class, you would then find the correct property.
// Example, check console.log(mssqlStoreModule) to confirm the correct property.
const MSSQLStore = mssqlStoreModule.default || mssqlStoreModule.MSSQLStore;
Use code with caution.

Option 3: Check NPM documentation
The most reliable solution is to check the connect-mssql-v2 documentation on NPM. The documentation provides the correct import syntax and usage, which likely looks like this: 
javascript
import session from 'express-session';
import { MSSQLStore } from 'connect-mssql-v2';

// In an async context
const { MSSQLStore } = await import('connect-mssql-v2');
const store = new MSSQLStore(config, options);
app.use(session({ store: store }));
Use code with caution.

Steps to resolve
Inspect the module: Add a console.log to your code to inspect the imported module and determine its export structure.
javascript
const mssqlStoreModule = await import('connect-mssql-v2');
console.log(mssqlStoreModule);
Use code with caution.

This will reveal whether MSSQLStore is available as a named export or a default export.
Adjust the import: Update your import statement based on the result of your inspection.
Correct initialization: Ensure the MSSQLStore is correctly instantiated and passed to the session middleware. The full initialization may look like this:
javascript
const { MSSQLStore } = await import('connect-mssql-v2'); // Adjust import as needed
const session = require('express-session'); // Assuming you use this

// Create the store
const store = new MSSQLStore({
    user: config.db.user,
    password: config.db.password,
    server: config.db.server,
    database: config.db.database,
});

// Set up session middleware
app.use(session({
    secret: 'your-secret-key', // Replace with a secure key
    store: store,
    resave: false,
    saveUninitialized: true,
    cookie: { maxAge: 86400000 } // 24 hours
}));
Use code with caution.

